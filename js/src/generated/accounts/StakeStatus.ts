/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Key, keyBeet } from '../types/Key';

/**
 * Arguments used to create {@link StakeStatus}
 * @category Accounts
 * @category generated
 */
export type StakeStatusArgs = {
  key: Key;
  collectionMint: web3.PublicKey;
  mint: web3.PublicKey;
  stakeStart: beet.bignum;
};
/**
 * Holds the data for the {@link StakeStatus} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakeStatus implements StakeStatusArgs {
  private constructor(
    readonly key: Key,
    readonly collectionMint: web3.PublicKey,
    readonly mint: web3.PublicKey,
    readonly stakeStart: beet.bignum,
  ) {}

  /**
   * Creates a {@link StakeStatus} instance from the provided args.
   */
  static fromArgs(args: StakeStatusArgs) {
    return new StakeStatus(args.key, args.collectionMint, args.mint, args.stakeStart);
  }

  /**
   * Deserializes the {@link StakeStatus} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [StakeStatus, number] {
    return StakeStatus.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakeStatus} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<StakeStatus> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find StakeStatus account at ${address}`);
    }
    return StakeStatus.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link StakeStatus} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakeStatus, number] {
    return stakeStatusBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link StakeStatus} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakeStatusBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakeStatus}
   */
  static get byteSize() {
    return stakeStatusBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakeStatus} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(StakeStatus.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link StakeStatus} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === StakeStatus.byteSize;
  }

  /**
   * Returns a readable version of {@link StakeStatus} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      key: 'Key.' + Key[this.key],
      collectionMint: this.collectionMint.toBase58(),
      mint: this.mint.toBase58(),
      stakeStart: this.stakeStart,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakeStatusBeet = new beet.BeetStruct<StakeStatus, StakeStatusArgs>(
  [
    ['key', keyBeet],
    ['collectionMint', beetSolana.publicKey],
    ['mint', beetSolana.publicKey],
    ['stakeStart', beet.u64],
  ],
  StakeStatus.fromArgs,
  'StakeStatus',
);
