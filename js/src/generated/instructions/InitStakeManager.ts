/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InitStakeManagerArgs, initStakeManagerArgsBeet } from '../types/InitStakeManagerArgs';

/**
 * @category Instructions
 * @category InitStakeManager
 * @category generated
 */
export type InitStakeManagerInstructionArgs = {
  initStakeManagerArgs: InitStakeManagerArgs;
};
/**
 * @category Instructions
 * @category InitStakeManager
 * @category generated
 */
const InitStakeManagerStruct = new beet.BeetArgsStruct<
  InitStakeManagerInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['initStakeManagerArgs', initStakeManagerArgsBeet],
  ],
  'InitStakeManagerInstructionArgs',
);
/**
 * Accounts required by the _InitStakeManager_ instruction
 *
 * @property [_writable_, **signer**] stakeInitializer Account that initializes the stake manager. Also has to be the authority of the provided collection NFT
 * @property [_writable_] stakeManagerPda The stakeBOB stake manager account
 * @property [] collectionMint The mint of the collection NFT
 * @property [] collectionMetadata The token metadata for the collection NFT
 * @category Instructions
 * @category InitStakeManager
 * @category generated
 */
export type InitStakeManagerInstructionAccounts = {
  stakeInitializer: web3.PublicKey;
  stakeManagerPda: web3.PublicKey;
  collectionMint: web3.PublicKey;
  collectionMetadata: web3.PublicKey;
};

const initStakeManagerInstructionDiscriminator = 0;

/**
 * Creates a _InitStakeManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitStakeManager
 * @category generated
 */
export function createInitStakeManagerInstruction(
  accounts: InitStakeManagerInstructionAccounts,
  args: InitStakeManagerInstructionArgs,
) {
  const { stakeInitializer, stakeManagerPda, collectionMint, collectionMetadata } = accounts;

  const [data] = InitStakeManagerStruct.serialize({
    instructionDiscriminator: initStakeManagerInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: stakeInitializer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: stakeManagerPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('MyProgram1111111111111111111111111111111111'),
    keys,
    data,
  });
  return ix;
}
