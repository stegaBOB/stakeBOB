/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { UnstakeArgs, unstakeArgsBeet } from '../types/UnstakeArgs';

/**
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export type UnstakeInstructionArgs = {
  unstakeArgs: UnstakeArgs;
};
/**
 * @category Instructions
 * @category Unstake
 * @category generated
 */
const UnstakeStruct = new beet.BeetArgsStruct<
  UnstakeInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['unstakeArgs', unstakeArgsBeet],
  ],
  'UnstakeInstructionArgs',
);
/**
 * Accounts required by the _Unstake_ instruction
 *
 * @property [_writable_, **signer**] staker Account that is about to unstake their NFT
 * @property [_writable_] stakeManager The stakeBOB stake manager account
 * @property [_writable_] stakeStatusPda The stake status PDA account
 * @property [] collectionMint The mint of the collection NFT
 * @property [] collectionMetadata The token metadata for the collection NFT
 * @property [] tokenMetadataProgram The Token Metadata Program
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export type UnstakeInstructionAccounts = {
  staker: web3.PublicKey;
  stakeManager: web3.PublicKey;
  stakeStatusPda: web3.PublicKey;
  collectionMint: web3.PublicKey;
  collectionMetadata: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

const unstakeInstructionDiscriminator = 2;

/**
 * Creates a _Unstake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export function createUnstakeInstruction(
  accounts: UnstakeInstructionAccounts,
  args: UnstakeInstructionArgs,
) {
  const {
    staker,
    stakeManager,
    stakeStatusPda,
    collectionMint,
    collectionMetadata,
    tokenMetadataProgram,
  } = accounts;

  const [data] = UnstakeStruct.serialize({
    instructionDiscriminator: unstakeInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: staker,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: stakeManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeStatusPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('MyProgram1111111111111111111111111111111111'),
    keys,
    data,
  });
  return ix;
}
