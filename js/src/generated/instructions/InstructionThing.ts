/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InstructionThingArgs, instructionThingArgsBeet } from '../types/InstructionThingArgs';

/**
 * @category Instructions
 * @category InstructionThing
 * @category generated
 */
export type InstructionThingInstructionArgs = {
  instructionThingArgs: InstructionThingArgs;
};
/**
 * @category Instructions
 * @category InstructionThing
 * @category generated
 */
const InstructionThingStruct = new beet.BeetArgsStruct<
  InstructionThingInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['instructionThingArgs', instructionThingArgsBeet],
  ],
  'InstructionThingInstructionArgs',
);
/**
 * Accounts required by the _InstructionThing_ instruction
 *
 * @property [_writable_, **signer**] signedWritableAccount signed, writable account description
 * @property [_writable_] writableAccount writable, non signed account description
 * @property [] nonWritableAccount non signed, non writable account description
 * @category Instructions
 * @category InstructionThing
 * @category generated
 */
export type InstructionThingInstructionAccounts = {
  signedWritableAccount: web3.PublicKey;
  writableAccount: web3.PublicKey;
  nonWritableAccount: web3.PublicKey;
};

const instructionThingInstructionDiscriminator = 0;

/**
 * Creates a _InstructionThing_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InstructionThing
 * @category generated
 */
export function createInstructionThingInstruction(
  accounts: InstructionThingInstructionAccounts,
  args: InstructionThingInstructionArgs,
) {
  const { signedWritableAccount, writableAccount, nonWritableAccount } = accounts;

  const [data] = InstructionThingStruct.serialize({
    instructionDiscriminator: instructionThingInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: signedWritableAccount,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: writableAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: nonWritableAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('MyProgram1111111111111111111111111111111111'),
    keys,
    data,
  });
  return ix;
}
